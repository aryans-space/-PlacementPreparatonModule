1)Populate Next Right pointers of Tree

class Solution {
    public Node connect(Node node) {
        Map<Integer, List<Node>> map = new HashMap<>();
        goDFS(0, node, map);
        for (int key : map.keySet()) {
            List<Node> list = map.get(key);
            for (int i = 1; i < list.size(); i++) {
                list.get(i - 1).next = list.get(i);
            }
        }
        return node;
    }

    private void goDFS(int lvl, Node node, Map<Integer, List<Node>> map) {
        if (node == null) return;

        List<Node> list = map.computeIfAbsent(lvl, k -> new ArrayList<>());
        list.add(node);
        lvl++;
        goDFS(lvl, node.left, map);
        goDFS(lvl, node.right, map);
    }
}

2)Search given Key in BST

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null)
            return null;
        
        if(val>root.val)
            return searchBST(root.right,val);
        else if(root.val==val)
            return root;
        return searchBST(root.left,val);
        
    }
}

3)Construct BST from given keys
class Solution {
    public TreeNode createBST(int arr[], int st, int end){
        if(st>end){
            return null;
        }

        int mid = (st+end)/2;
        TreeNode root = new TreeNode(arr[mid]);
        root.left = createBST(arr,st,mid-1);
        root.right = createBST(arr,mid+1,end);

        return root;
    }
    public TreeNode sortedArrayToBST(int[] nums) {
        int st = 0;
        int end = nums.length-1;
        return createBST(nums,st,end);
        
    }
}

4)	Construct a BST from a preorder traversal

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return build(preorder,0,preorder.length-1);
    }
    
    public TreeNode build(int[] pre,int start,int end){
        if(start>end)
            return null;
        TreeNode root=new TreeNode(pre[start]);
        int rootval=pre[start];
        int index=start+1;
        
        while(index<pre.length && pre[index]<rootval)
            index++;
        root.left=build(pre,start+1,index-1);
        root.right=build(pre,index,end);
        return root;
    }
}

5)Check is a BT is BST or not

class Solution {
    ArrayList<Integer> l=new ArrayList<>();
    public boolean isValidBST(TreeNode root) {
       inorder(root);
       for(int i=0;i<l.size()-1;i++){
           if(l.get(i)>=l.get(i+1))
               return false;
       } 
        return true;
    }
    
    public void inorder(TreeNode root){
        if(root==null)
            return;
       inorder(root.left);
        l.add(root.val);
        inorder(root.right); 
    }
}

6)Find LCA of two nodes in BST
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(root==null)
            return null;
        int rootval=root.val;
        if(p.val<rootval && q.val<rootval)
            return lowestCommonAncestor(root.left, p, q);
          if(p.val>rootval && q.val>rootval)
            return lowestCommonAncestor(root.right, p, q);
        return root;
        
    }
}

7)Find the inorder predecessor/successor of a given key in BST
public class Solution {
	public static ArrayList<Integer> predecessorSuccessor(BinaryTreeNode<Integer> root, int key) {
		// Write your code here.
				ArrayList<Integer> ans = new ArrayList<>();
		ans.add(floorInBST(root, key));
		ans.add(findCeil(root, key));

		return ans;		
	}

	private static int floorInBST(BinaryTreeNode<Integer> root, int x) {
        //    Write your code here.
        int floor = -1;

        while(root!= null){
            if(root.data >= x){
                root = root.left;
            }else{
                floor = root.data;
                root = root.right;
            }
            
        }

        return floor;
    }
	private static int findCeil(BinaryTreeNode<Integer> root, int x) {

        // Write your code here
        int floor = -1;

        while(root!= null){
            if(root.data <= x){
                root = root.right;
            }else{
                floor = root.data;
                root = root.left;
            }
            
        }

        return floor;

    }
	
	
}
