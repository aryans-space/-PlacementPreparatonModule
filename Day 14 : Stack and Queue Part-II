1)Next Smaller Element
import java.io.*;
import java.lang.*;
import java.util.*;
 
class Abc {
    /* prints element and NSE pair for all
    elements of arr[] of size n */
    public static void printNSE(int arr[], int n)
    {
        Stack<Integer> s = new Stack<Integer>();
        HashMap<Integer, Integer> mp
            = new HashMap<Integer, Integer>();
 
        /* push the first element to stack */
        s.push(arr[0]);
 
        // iterate for rest of the elements
        for (int i = 1; i < n; i++) {
 
            if (s.empty()) {
                s.push(arr[i]);
                continue;
            }
 
            /* if stack is not empty, then
    pop an element from stack.
    If the popped element is greater
    than next, then
    a) print the pair
    b) keep popping while elements are
    greater and stack is not empty */
 
            while (s.empty() == false
                   && s.peek() > arr[i]) {
                mp.put(s.peek(), arr[i]);
                s.pop();
            }
 
            /* push next to stack so that we can find
            next smaller for it */
            s.push(arr[i]);
        }
 
        /* After iterating over the loop, the remaining
        elements in stack do not have the next smaller
        element, so print -1 for them */
        while (s.empty() == false) {
            mp.put(s.peek(), -1);
            s.pop();
        }
 
        for (int i = 0; i < n; i++)
            System.out.println(arr[i] + " ---> "
                               + mp.get(arr[i]));
    }
 
    /* Driver program to test above functions */
    public static void main(String[] args)
    {
        int arr[] = { 11, 13, 21, 3 };
        int n = arr.length;
        printNSE(arr, n);
    }
}

2)LRU cache (IMPORTANT)

class Node {
    public int key;
    public int val;
    public Node next;
    public Node prev;

    public Node(int key, int val) {
        this.key = key;
        this.val = val;
        next = null;
        prev = null;
    }
}

class LRUCache {
    private Map<Integer, Node> m;
    private Node head;
    private Node tail;
    private int size;

    public LRUCache(int capacity) {
        size = capacity;
        m = new HashMap<>();
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head.next = tail;
        tail.prev = head;
    }

    private void deleteNode(Node p) {
        Node pre = p.prev;
        Node nex = p.next;
        pre.next = nex;
        nex.prev = pre;
    }

    private void addNode(Node newnode) {
        Node temp = head.next;
        head.next = newnode;
        newnode.prev = head;
        newnode.next = temp;
        temp.prev = newnode;
    }

    public int get(int key) {
        if (!m.containsKey(key))
            return -1;

        Node p = m.get(key);
        deleteNode(p);
        addNode(p);
        m.put(key, head.next);
        return head.next.val;
    }

    public void put(int key, int value) {
        if (m.containsKey(key)) {
            Node c = m.get(key);
            deleteNode(c);
            c.val = value;
            addNode(c);
            m.put(key, head.next);
        } else {
            if (m.size() == size) {
                Node prev = tail.prev;
                deleteNode(prev);
                Node l = new Node(key, value);
                addNode(l);
                m.remove(prev.key);
                m.put(key, head.next);
            } else {
                Node l = new Node(key, value);
                addNode(l);
                m.put(key, head.next);
            }
        }
    }
}

3)LFU cache
class LFUCache {

  private final Map<Integer, Integer> keyToFreq;
  private final TreeMap<Integer, LinkedHashSet<Integer>> freqToKey;
  private final Map<Integer, Integer> keyToValue;
  private final int capacity;

  public LFUCache(int capacity) {
    keyToFreq = new HashMap<>();
    freqToKey = new TreeMap<>();
    keyToValue = new HashMap<>();

    this.capacity = capacity;
  }

  public int get(int key) {
    if (keyToValue.containsKey(key)) {
      increaseFrequency(key);
      return keyToValue.get(key);
    }
    return -1;
  }

  public void put(int key, int value) {
    if (capacity == 0)
      return;

    if (keyToFreq.size() == capacity && !keyToValue.containsKey(key))
      removeLastFrequentlyUsed();

    keyToValue.put(key, value);

    if (keyToFreq.containsKey(key))
      increaseFrequency(key);
    else {
      keyToFreq.put(key, 1);
      freqToKey.computeIfAbsent(1, p -> new LinkedHashSet<>()).add(key);
    }
  }

  private void increaseFrequency(int key) {
    int frequency = keyToFreq.get(key);

    keyToFreq.put(key, frequency + 1);
    deletePreviousFrequency(key, frequency);

    freqToKey.computeIfAbsent(frequency + 1, p -> new LinkedHashSet<>()).add(key);
  }

  private void deletePreviousFrequency(int key, int frequency) {
    LinkedHashSet<Integer> keys = freqToKey.get(frequency);
    keys.remove(key);

    if (keys.isEmpty())
      freqToKey.remove(frequency);
  }

  private void removeLastFrequentlyUsed() {
    Map.Entry<Integer, LinkedHashSet<Integer>> first = freqToKey.firstEntry();
    LinkedHashSet<Integer> keys = first.getValue();

    int key = keys.iterator().next();

    keys.remove(key);
    if (keys.isEmpty())
      freqToKey.remove(first.getKey());

    keyToFreq.remove(key);
    keyToValue.remove(key);
  }
}

4)Largest rectangle in a histogram
class Solution {
     Stack<Integer> s=new Stack<>();
    public int largestRectangleArea(int[] a) {
        int[] right=nsr(a);
        s.clear();
        int[] left=nsl(a);
        int max=Integer.MIN_VALUE;
        int[] width=new int[a.length];
        int[] area=new int[a.length];
        for(int i=0;i<a.length;i++){
            width[i]=right[i]-left[i]-1;
            area[i]=a[i]* width[i];
            max=Math.max(area[i],max);
        }
        return max;
    }
    
    public int[] nsr(int[] a){
        int[] b=new int[a.length];
        int index=b.length-1;
       

        int pseudo=a.length;
        for(int i=a.length-1;i>=0;i--){
            if(s.isEmpty())
                b[index]=pseudo;
            else if(s.size()>0 && a[s.peek()]<a[i])
                b[index]=s.peek();
            else if(s.size()>0 && a[s.peek()]>=a[i]){
                while(s.size()>0 && a[s.peek()]>=a[i])
                    s.pop();
                if(s.size()==0)
                    b[index]=pseudo;
                else
                    b[index]=s.peek();
            }
            s.push(i);
            index--;
        }
        return b;
    }

    public int[] nsl(int[] a){

        int[] b=new int[a.length];
        int index=0;

         
        for(int i=0;i<b.length;i++){
            if(s.isEmpty())
                b[index]=-1;
            else if(s.size()>0 && a[s.peek()]<a[i])
                b[index]=s.peek();
            else if(s.size()>0 && a[s.peek()]>=a[i]){
                while(s.size()>0 && a[s.peek()]>=a[i])
                    s.pop();
                if(s.size()==0)
                    b[index]=-1;
                else
                    b[index]=s.peek();
            }
            s.push(i);
            index++;
        }
        return b;

    }
}

5)	Sliding Window maximum
class Solution {
    public int[] maxSlidingWindow(int[] a, int k) {
       
        int n=a.length;
        int[] ans=new int[n-k+1];
        int i=0;
        int j=0;
        int x=0;
        Deque<Integer> q = new ArrayDeque<>();

        while(j<n){
            while(!q.isEmpty() && q.peekLast()<a[j]){
                q.pollLast();
            }
            q.add(a[j]);

            if(j-i+1<k)
                j++;
            else if(j-i+1==k){
                ans[x++]=q.peek();
                if(a[i]==q.peek())
                    q.remove();
                i++;
                j++;


            }
        }
        return ans;
        
    }
}

6)Implement Min Stack
class MinStack {
    Stack<Integer> s;
    Stack<Integer> ss;
    public MinStack() {
        s=new Stack<>();
        ss=new Stack<>();
    }
    
    public void push(int val) {
        s.push(val);
        if(ss.size()==0 || val<=ss.peek())
            ss.push(val);
    }
    
    public void pop() {
        if(s.size()==0)
            return;
        int ans=s.pop();
        if(ss.peek()==ans)
            ss.pop();
    }
    
    public int top() {
        if(s.size()==0)
            return -1;
        return s.peek();
    }
    
    public int getMin() {
        if(ss.size()==0)
            return -1;
        return ss.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

7)Rotten Orange (Using BFS)
class Solution {
      class Pair{
        int x; //row
        int y; //col
        public Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
    public int orangesRotting(int[][] grid) {
        int total=0,rotten=0,time=0;
        Queue<Pair> q=new LinkedList<>();
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==1 || grid[i][j]==2)
                    total++;
                if(grid[i][j]==2)
                    q.add(new Pair(i,j));    
            }
        }
        
        if(total==0)
            return 0;
        
        while(!q.isEmpty()){
            int s=q.size();
            rotten+=s;
            if(rotten==total)
                return time;
             time++;   
            for(int i=0;i<s;i++){
                Pair curr=q.poll();
              
                if(curr.x-1>=0 && grid[curr.x-1][curr.y] ==1){
                    grid[curr.x-1][curr.y]=2;
                    q.add(new Pair(curr.x-1,curr.y));
                    
                }
                
                if(curr.x+1<grid.length && grid[curr.x+1][curr.y] ==1){
                    grid[curr.x+1][curr.y]=2;
                    q.add(new Pair(curr.x+1,curr.y));
                    
                }
                
                if(curr.y-1>=0 && grid[curr.x][curr.y-1] ==1){
                    grid[curr.x][curr.y-1]=2;
                    q.add(new Pair(curr.x,curr.y-1));
                    
                }
                
                if(curr.y+1<grid[0].length && grid[curr.x][curr.y+1] ==1){
                    grid[curr.x][curr.y+1]=2;
                   q.add(new Pair(curr.x,curr.y+1));
                    
                }
            }
        }
        return -1;
    }
}

8)Stock span problem
class StockSpanner {
   class Pair{
      int first;
      int second;
      Pair(int first,int second){
          this.first = first;
          this.second = second;
      }
  }
    
    Stack<Pair> s ;
    int index = -1;
    
    public StockSpanner() {
        s = new Stack<>();
    }
    
    public int next(int price) {
        index++;
        int res=0;
       
         if(s.isEmpty())
                res=-1;
            else if(s.size()>0 && s.peek().first>price)
                res=s.peek().second;
            else if(s.size()>0 && s.peek().first<=price){
                while(s.size()>0 && s.peek().first<=price)
                    s.pop();
                if(s.size()==0)
                    res=-1;
                else
                   res=s.peek().second;
            }
        s.push(new Pair(price,index));
        
        return index-res;
    }
}

9)Find the maximum of minimums of every window size
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
    int[] left=new int[n];
    int[] right=new int[n];   
    int[] ans = new int[n]; 
    for(int i = 0;i<n;i++){
        ans[i] = Integer.MIN_VALUE;
    }
    Stack<Integer> st=new Stack<>();
    left[0] = -1;
    st.push(0);
    for(int i=1;i<n;i++) {
        while(!st.empty() && a[st.peek()]>=a[i]) {
            st.pop();
        }
        left[i]=st.empty()?-1:st.peek();
        st.push(i);
    }
    while(!st.empty()) {
        st.pop();
    }
    right[n-1]=n;
    st.push(n-1);
    for(int i=n-2;i>=0;i--) {
        while(!st.empty() && a[st.peek()]>=a[i]) {
            st.pop();
        }
        right[i]=st.empty()?n:st.peek();
        st.push(i);
    }
    for(int i=0;i<n;i++) {
        int len=right[i]-left[i]-1;
        ans[len-1]=Math.max(ans[len-1],a[i]);
    }
    for(int i=n-2;i>=0;i--) {
        ans[i]=Math.max(ans[i],ans[i+1]);
    }
    return ans;
    }
}

10)The Celebrity Problem
class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int m[][], int n)
    {
    	// code here 
    	Stack<Integer> s=new Stack<>();
        for(int i=0;i<n;i++){
            s.push(i);
        }

        while(s.size()>=2){
            int i=s.pop();
            int j=s.pop();

            if(m[i][j]==1){
                s.push(j);
            }
            else{
                s.push(i);
            }
        }
        int pot=s.pop();

        for(int i=0;i<n;i++){
            if(i!=pot){
                if(m[i][pot]==0||m[pot][i]==1)
                    return -1;
            }
        }

        return pot;
    }
}
