1)Z-Function
class Solution {
   public int strStr(String haystack, String needle) {
  for (int i = 0; ; i++) {
    for (int j = 0; ; j++) {
      if (j == needle.length()) return i;
      if (i + j == haystack.length()) return -1;
      if (needle.charAt(j) != haystack.charAt(i + j)) break;
    }
  }
}
}

2)KMP algo / LPS(pi) array
import java.util.*;

public class Solution {

    public static List< Integer > stringMatch(String text, String pattern) {

        // Write your code here.

        

    int n = text.length(), m = pattern.length();

    List<Integer>ans=new ArrayList<>();

    int[] LPS=new int[m];

    int len = 0;

    for(int i = 1; i < m; i++){

        if(pattern.charAt(i) == pattern.charAt(len)){

            len++;

            LPS[i] = len;

        }

        else{

            if(len != 0){

                len = LPS[len-1];

            }

        }

    }

 

    int i = 0, j = 0;

    while(i < n){

        if(text.charAt(i) == pattern.charAt(j)){

            i++;

            j++;

            if(j == m){

                ans.add(i-j+1);

                j = LPS[j-1];

            } 

        }

        else {

            if(j > 0) j = LPS[j-1];

            else i++;

        }

    }

    return ans;

    }

}

3)Minimum characters needed to be inserted in the beginning to make it palindromic
public class Solution {

 

    public static int minCharsforPalindrome(String str) {

        //Write your code here

        int i=0,j=str.length()-1,trim=str.length()-1,res=0;

        while(i<j){

            if(str.charAt(i)==str.charAt(j)){

                i++;

                j--;

            }else{

                res++;

                i=0;

                j=--trim;

            }

        }

        return res;

    }

 

}

4)Check for Anagrams
class Solution {
    public boolean isAnagram(String s, String p) {
        
        if(p.length()!=s.length())
            return false;
        
        HashMap<Character,Integer> map=new HashMap<>();
        
        for(int i=0;i<s.length();i++)
        {
            if(map.containsKey(s.charAt(i)))
                map.put(s.charAt(i),map.get(s.charAt(i))+1);
            else
                map.put(s.charAt(i),1);
        }
        
        int count=map.size();
        int n=s.length();
        int k=s.length();
        int i=0;
        int j=0;
        while(j<n){
            
             if(map.containsKey(p.charAt(j))){
                map.put(p.charAt(j),map.get(p.charAt(j))-1);
                if(map.get(p.charAt(j))==0)
                    count--;
            }
             if(j-i+1<k)
                j++;
             else if(j-i+1==k){
                 
                if(count==0){
                    return true;
                }
                 else
                     return false;
            
            }
            
            
        }
        return false;
        
    }
}

5)Count and say
class Solution {
    public String countAndSay(int n) {
        if(n==1)
        {
            return "1";
        }
        if(n==2)
        {
            return "11";
        }
        StringBuilder nm=new StringBuilder();
        nm.append("11");
        for(int i=3;i<=n;i++)
        {
            StringBuilder kk=new StringBuilder();
            task(nm.toString(),kk);
            nm.setLength(0);
            nm.append(kk);
        }
        return nm.toString();
    }
    public void task(String s, StringBuilder nm)
    {
        int count=1;
        for(int i=0;i<s.length()-1;i++)
        {
            if(s.charAt(i) == s.charAt(i+1))
            {
                count++;
            }
            else
            {
                nm.append(count);
                nm.append(s.charAt(i));
                count=1;
            }
        }
        nm.append(count);
        nm.append(s.charAt(s.length()-1));
    }
}


6)	Compare version numbers
class Solution {
    public int compareVersion(String version1, String version2) {
        String[] arr1 = version1.split("\\.");
        String[] arr2 = version2.split("\\.");
        int i=0;
        while(i<arr1.length || i<arr2.length)
        {
            if(i<arr1.length && i<arr2.length)
            {
                if(Integer.parseInt(arr1[i]) < Integer.parseInt(arr2[i]))
                {
                    return -1;
                }
                else if(Integer.parseInt(arr1[i]) > Integer.parseInt(arr2[i]))
                {
                    return 1;
                }
            }
            else if(i<arr1.length)
            {
                if(Integer.parseInt(arr1[i]) != 0)
                {
                    return 1;
                }
            } 
            else if(i<arr2.length)
            {
                if(Integer.parseInt(arr2[i]) != 0)
                {
                    return -1;
                }
            }
            i++;
        }
        return 0;
    }
}
