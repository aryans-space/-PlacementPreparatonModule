1)Find intersection point of Y LinkedList
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode temp1=headA;
        ListNode temp2=headB;
       int l1=length(temp1);
        int l2=length(temp2);
        
        if(l1>l2){
            for(int i=0;i<l1-l2;i++)
                headA=headA.next;
        }
        else if(l2>l1){
            for(int i=0;i<l2-l1;i++)
                headB=headB.next;
        }
        
        while(headA!=null){
            if(headA==headB)
                return headA;
             headA=headA.next;
            headB=headB.next;
        }
        return null;
    }
    public int length(ListNode node){
        int c=0;
        while(node!=null){
            c++;
            node=node.next;
        }
        return c;
    }
}


2)Detect a cycle in Linked List
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        ListNode f=head;
        ListNode s=head;
        
        while(f!=null && f.next!=null){
            f=f.next.next;
            s=s.next;
            if(f==s)
                return true;
        }
        
        return false;
    }
}

3)Reverse a LinkedList in groups of size k.
class Solution {
    public static int size1(ListNode head)
    {
        int size=0;
        while(head!=null)
        {
            head=head.next;
            size++;
        }
        return size;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        
     ListNode curr=head;
       ListNode prev=null;
       ListNode nxt=curr;
       int count=0;
       int size=0;
      

      
      

        if(size1(head)<k && nxt!=null)
        {
           
           return nxt;
        }
        else
        {
       while(curr!=null && count<k )
       {
           nxt=curr.next;
           curr.next=prev;
           prev=curr;
           curr=nxt;
           count++;
       }
       if(nxt!=null)
       head.next=reverseKGroup(nxt,k);
        }
       return prev;
        
        
    }
}

4)Check if a LinkedList is palindrome or notâ€¦
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null)
            return false;
        ListNode middle=midd(head);
        ListNode temp=reverse(middle);
        
        while(head!=null && temp!=null){
            if(temp.val!=head.val)
                return false;
            temp=temp.next;
            head=head.next;
        }
        return true;
    }
    
    public ListNode midd(ListNode head){
        if(head==null)
            return null;
        ListNode f=head;
        ListNode s=head;
        
        while(f!=null && f.next!=null){
            f=f.next.next;
            
            s=s.next;
        }
        return s;
    }
    
    public ListNode reverse(ListNode head){
        if(head==null)
            return null;
        ListNode prev=null;
        ListNode pres=head;
        ListNode next=pres.next;
        while(pres!=null){
            pres.next=prev;
            prev=pres;
            pres=next;
            if(next!=null)
                next=next.next;
        }
        
        return prev;
    }
}

5)Find the starting point of the Loop of Linked List
public class Solution {
    public ListNode detectCycle(ListNode head) {
         
        ListNode f=head;
        ListNode s=head;
       
        int flag=0;
        while(f!=null && f.next!=null){
            f=f.next.next;
            s=s.next;
            if(f==s)
            {
               
                flag=1;
                break;
            }
        }
        
       if(flag==1)
       {
           ListNode temp=head;
           while(temp!=s){
               temp=temp.next;
               s=s.next;
           }
           return temp;
       }
        return null;
    }
}


6)Flattening of a LinkedList
class GfG
{
     Node merge(Node a, Node b)
    {
        // if first linked list is empty then second
        // is the answer
        if (a == null)
            return b;
 
        // if second linked list is empty then first
        // is the result
        if (b == null)
            return a;
 
        // compare the data members of the two linked lists
        // and put the larger one in the result
        Node result;
 
        if (a.data < b.data) {
            result = a;
            result.down = merge(a.down, b);
        }
 
        else {
            result = b;
            result.down = merge(a, b.down);
        }
 
        result.right = null;
        return result;
    }
 
    Node flatten(Node root)
    {
        // Base Cases
        if (root == null || root.right == null)
            return root;
 
        // recur for list on right
        root.right = flatten(root.right);
 
        // now merge
        root = merge(root, root.right);
 
        // return the root
        // it will be in turn merged with its left
        return root;
    }
 
    /* Utility function to insert a node at beginning of the
       linked list */
    Node push(Node head_ref, int data)
    {
        /* 1 & 2: Allocate the Node &
                  Put in the data*/
        Node new_node = new Node(data);
 
        /* 3. Make next of new Node as head */
        new_node.down = head_ref;
 
        /* 4. Move the head to point to new Node */
        head_ref = new_node;
 
        /*5. return to link it back */
        return head_ref;
    }
   
}
