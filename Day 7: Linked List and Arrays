1)	Rotate a LinkedList
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        
        if(k<=0 || head==null || head.next==null)
            return head;
        
        int l=1;
        ListNode temp=head;
        while(temp.next!=null){
            l++;
            temp=temp.next;
        }
        ListNode temp2=head;
        int r=k%l;
        temp.next=head;
        
        ListNode prev=null;
        ListNode pres=head;
        for(int i=0;i<l-r;i++){
            prev=pres;
            if(pres!=null)
            pres=pres.next;
        }
        prev.next=null;
        return pres;
        
    }
}

2)Clone a Linked List with random and next pointer
public RandomListNode copyRandomList(RandomListNode head) {
  RandomListNode iter = head, next;

  // First round: make copy of each node,
  // and link them together side-by-side in a single list.
  while (iter != null) {
    next = iter.next;

    RandomListNode copy = new RandomListNode(iter.label);
    iter.next = copy;
    copy.next = next;

    iter = next;
  }

  // Second round: assign random pointers for the copy nodes.
  iter = head;
  while (iter != null) {
    if (iter.random != null) {
      iter.next.random = iter.random.next;
    }
    iter = iter.next.next;
  }

  // Third round: restore the original list, and extract the copy list.
  iter = head;
  RandomListNode pseudoHead = new RandomListNode(0);
  RandomListNode copy, copyIter = pseudoHead;

  while (iter != null) {
    next = iter.next.next;

    // extract the copy
    copy = iter.next;
    copyIter.next = copy;
    copyIter = copy;

    // restore the original list
    iter.next = next;

    iter = next;
  }

  return pseudoHead.next;
}

3)3 sum
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int target = 0;
        Arrays.sort(nums);
        Set<List<Integer>> s = new HashSet<>();
        List<List<Integer>> output = new ArrayList<>();
        for (int i = 0; i < nums.length; i++){
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == target) {
                    s.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        output.addAll(s);
        return output;
    }
}


4)Trapping Rainwater
class Solution {
    public int trap(int[] height) {
        
        int[] maxl=new int[height.length];
        int[] maxr=new int[height.length];
        maxl[0]=height[0];
        maxr[height.length-1]=height[height.length-1];
        
        for(int i=1;i<maxl.length;i++){
            maxl[i]=Math.max(maxl[i-1],height[i]);
        }
        
        for(int i=height.length-2;i>=0;i--){
            maxr[i]=Math.max(maxr[i+1],height[i]);
        }
        int sum=0;
        for(int i=0;i<height.length;i++){
            int water=Math.min(maxr[i],maxl[i])-height[i];
            sum+=water;
        }
        
        return sum;
        
    }
}

5)Remove Duplicate from Sorted array
class Solution {
    public int removeDuplicates(int[] nums) {
      int k=0;
        for(int i=k+1;i<nums.length;i++){
            if(nums[i]!=nums[k]){
                k++;
                nums[k]=nums[i];
            }
        }
    return k+1;
    }
    
}

6)Max consecutive ones
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int max=0;
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1)
                count++;
            else{
                max=Math.max(max,count);
                count=0;
            }
        }
        max=Math.max(max,count);
        return max;
        
    }
}
