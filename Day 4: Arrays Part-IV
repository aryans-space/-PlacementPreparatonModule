1)2Sum Problem
class Solution {
    public int[] twoSum(int[] nums, int target) {
       HashMap<Integer,Integer> map=new HashMap<>();
        int[] a=new int[2];
        for(int i=0;i<nums.length;i++){
            int req=target-nums[i];
            
            if(map.containsKey(req)){
                a[0]=i;
                a[1]=map.get(req);
                return a;
            }
            map.put(nums[i],i);
            
            
            
        }
        return a;
    }
}

2)4-Sum Problem
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        Arrays.sort(nums);
        
        
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                long req=(long)target -nums[i]-nums[j];
                
                int front=j+1;
                int back=nums.length-1;
                
                while(front<back){
                    
                    if(nums[front]+nums[back]==req)
                    {
                        ans.add(Arrays.asList(nums[i],nums[j],nums[front],nums[back]));
                        
                    while(front<back && nums[front]==nums[front+1]) front++;
                    while(front<back && nums[back]==nums[back-1]) back--;
                    front++;
                    back--;
                    }
                    else if(nums[front]+nums[back]>req)
                        back--;
                    else front++;
                    
                }
                
                while(j+1<nums.length && nums[j]==nums[j+1])j++;
                
                
                
            }
             while(i+1<nums.length && nums[i]==nums[i+1])i++;
        }
        
        return ans;
  
    }
}

3)Longest Consecutive Sequence
class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        int max=0;
        int count=1;
        int i;
        for(i=1;i<nums.length;i++){
            if(nums[i]==1+nums[i-1]){
                count++;
            }
            else if(nums[i]==nums[i-1]){
                max=Math.max(max,count);
            }
            else{
                max=Math.max(max,count);
                count=1;
            }
        }
        if(i==nums.length)
            max=Math.max(max,count);
        return max;
    }
}

4)Largest Subarray with K sum
class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        int max_len = 0;
 
        // Pick a starting point
        for (int i = 0; i < N; i++) {
           
            // Initialize curr_sum for every
            // starting point
            int curr_sum = 0;
 
            // try all subarrays starting with 'i'
            for (int j = i; j < N; j++) {
                curr_sum += arr[j];
 
                // If curr_sum becomes 0, then update
                // max_len
                if (curr_sum == 0)
                    max_len = Math.max(max_len, j - i + 1);
            }
        }
        return max_len;
    }
}

5)Count number of subarrays with given xor K
public class GFG {
 
    // Simple function that returns
    // count of subarrays of arr with
    // XOR value equals to m
    static long subarrayXor(int arr[],
                             int n, int m)
    {
         
        // Initialize ans
        long ans = 0;
 
        // Pick starting point i of
        // subarrays
        for (int i = 0; i < n; i++)
        {
             
            // Store XOR of current
            // subarray
            int xorSum = 0;
 
            // Pick ending point j of
            // subarray for each i
            for (int j = i; j < n; j++)
            {
                 
                // calculate xorSum
                xorSum = xorSum ^ arr[j];
 
                // If xorSum is equal to
                // given value, increase
                // ans by 1.
                if (xorSum == m)
                    ans++;
            }
        }
         
        return ans;
    }
}



6)Longest Substring without Repeating Characters
class Solution {
    public int lengthOfLongestSubstring(String s) {
         int i=0;
        int j=0;
        int max=0;
        HashMap <Character,Integer> map=new HashMap<>();
        while(j<s.length()){
            char c=s.charAt(j);
            map.put(c,map.getOrDefault(c,0)+1);

            if(map.size()==j-i+1){
                max=Math.max(max,j-i+1);
                j++;
            }
            else if(map.size()<j-i+1){
                while(map.size()<j-i+1){
                    char c2=s.charAt(i);
                    map.put(c2,map.get(c2)-1);
                    if(map.get(c2)==0)
                        map.remove(c2);
                    i++;
                }
                if(map.size()==j-i+1){
                    max=Math.max(max,j-i+1);
                }
                j++;
            }

        }
        return max;
    }
}
