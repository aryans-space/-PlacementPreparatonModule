1)Binary Tree to Double Linked List
class Solution {
    TreeNode head = null;
    public void flatten(TreeNode root) {
        if (root != null) revPreOrder(root);
    }
    private void revPreOrder(TreeNode node) {
        if (node.right != null) revPreOrder(node.right);
        if (node.left != null) revPreOrder(node.left);
        node.left = null;
        node.right = head;
        head = node;
    }
}

2)Find median in a stream of running integer

class MedianFinder {
    List<Integer> list; 
    public MedianFinder() {
        this.list = new ArrayList<Integer>();
    }
    
    public void addNum(int num) {
        if(list.size() == 0) list.add(0, num);  
        else{
            int i=0;
            while(list.get(i) <= num && i<list.size()-1) i++;
            //*****The reason why I didn't traversed till the last index was to escape from IndexOutOfBounds Error*****
            if(list.get(i) <= num) list.add(i+1, num);
            else list.add(i, num);
        }
    }
    
    public double findMedian() {
        int n = list.size();
        if(n == 0) return 0;
        if(n%2 == 1) return list.get(n/2);
        return (double)((list.get(n/2) + list.get(n/2 - 1)))/2;
    }
}

3)K-th largest element in a stream.

class KthLargest {
    PriorityQueue<Integer> pq=new PriorityQueue<>();
    int newk;
    public KthLargest(int k, int[] nums) {
        pq=new PriorityQueue<>();
        for(int i=0;i<nums.length;i++){
            pq.add(nums[i]);
            if(pq.size()>k)
                pq.poll();
        }
        newk=k;
       
    }
    
    public int add(int val) {
        pq.add(val);
        if(pq.size()>newk)
            pq.poll();
        return pq.peek();
    }
}

4)Distinct numbers in Window.
public class Solution {
    public ArrayList<Integer> dNums(ArrayList<Integer> A, int B) {
        ArrayList<Integer> arr = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        if(B>A.size()){
            return arr;
        }
        int j=0;
        for(int i=0; i<A.size(); i++){
            if(i<B){
                if(map.containsKey(A.get(i))){
                    int num = map.get(A.get(i))+1;
                    map.put(A.get(i),num);
                }else{
                    map.put(A.get(i),1);
                }
               
            }else{
                arr.add(map.size());
                if(map.get(A.get(j))>1){
                    int num2 = map.get(A.get(j))-1;
                    map.put(A.get(j),num2);
                    if(map.containsKey(A.get(i))){
                        int num = map.get(A.get(i))+1;
                        map.put(A.get(i),num);
                    }else{
                        map.put(A.get(i),1);
                    }
                    j++;
                }else{
                    map.remove(A.get(j));
                    if(map.containsKey(A.get(i))){
                        int num = map.get(A.get(i))+1;
                        map.put(A.get(i),num);
                    }else{
                        map.put(A.get(i),1);
                    }
                    j++;
                }
            }
           
        }
        arr.add(map.size());
        return arr;
    }
}



5)K-th largest element in an unsorted array.

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minheap=new PriorityQueue<>();
        
        for(int i=0;i<nums.length;i++){
            minheap.add(nums[i]);
            if(minheap.size()>k)
                minheap.poll();
        }
        
        return minheap.peek();
    }
}

6)Flood-fill Algorithm

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int startColor = image[sr][sc];
        if (startColor == color)
            return image;
        image[sr][sc] = color;
        LinkedList<Integer[]> line = new LinkedList<>();
        int [][]move = new int[][]{{0,1}, {0, -1}, {1, 0}, {-1, 0}};
        line.add(new Integer[]{sr, sc});
        Integer []tmp;
        while (line.size() > 0) {
            tmp = line.getFirst();
            line.removeFirst();
            for (int[] step : move) {
                if (tmp[0] + step[0] > -1 && tmp[0] + step[0] < image.length &&
                        tmp[1] + step[1] > -1 && tmp[1] + step[1] < image[0].length &&
                        image[tmp[0] + step[0]][tmp[1] + step[1]] == startColor) {
                    image[tmp[0] + step[0]][tmp[1] + step[1]] = color;

                        line.add(new Integer[]{tmp[0] + step[0], tmp[1] + step[1]});
                }
            }
        }
        return image;
    }
}
