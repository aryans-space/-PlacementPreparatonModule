1)Implement Stack using Arrays
mport java.util.*;

public class Abc {

    public static void main(String[] args) {

        stack s = new stack();
        s.push(6);
        s.push(3);
        s.push(7);
        System.out.println("Top of the stack before deleting any element " + s.top());
        System.out.println("Size of the stack before deleting any element " + s.size());
        System.out.println("The element deleted is " + s.pop());
        System.out.println("Size of the stack after deleting an element " + s.size());
        System.out.println("Top of the stack after deleting an element " + s.top());
    }
}
class stack {
    int size = 10000;
    int arr[] = new int[size];
    int top = -1;
    void push(int x) {
        top++;
        arr[top] = x;
    }
    int pop() {
        int x = arr[top];
        top--;
        return x;
    }
    int top() {
        return arr[top];
    }
    int size() {
        return top + 1;
    }
}


2)Implement Queue using Arrays
class Queue {

    private int arr[];
    private int start, end, currSize, maxSize;
    public Queue() {
        arr = new int[16];
        start = -1;
        end = -1;
        currSize = 0;
    }

    public Queue(int maxSize) {
        this.maxSize = maxSize;
        arr = new int[maxSize];
        start = -1;
        end = -1;
        currSize = 0;
    }
    public void push(int newElement) {
        if (currSize == maxSize) {
            System.out.println("Queue is full\nExiting...");
            System.exit(1);
        }
        if (end == -1) {
            start = 0;
            end = 0;
        } else
            end = (end + 1) % maxSize;
        arr[end] = newElement;
        System.out.println("The element pushed is " + newElement);
        currSize++;
    }
    public int pop() {
        if (start == -1) {
            System.out.println("Queue Empty\nExiting...");
            System.exit(1);
        }
        int popped = arr[start];
        if (currSize == 1) {
            start = -1;
            end = -1;
        } else
            start = (start + 1) % maxSize;
        currSize--;
        return popped;
    }
    public int top() {
        if (start == -1) {
            System.out.println("Queue is Empty");
            System.exit(1);
        }
        return arr[start];
    }
    public int size() {
        return currSize;
    }

}

public class Abc {
    public static void main(String args[]) {
        Queue q = new Queue(6);
        q.push(4);
        q.push(14);
        q.push(24);
        q.push(34);
        System.out.println("The peek of the queue before deleting any element " + q.top());
        System.out.println("The size of the queue before deletion " + q.size());
        System.out.println("The first element to be deleted " + q.pop());
        System.out.println("The peek of the queue after deleting an element " + q.top());
        System.out.println("The size of the queue after deleting an element " + q.size());
    }
}


3)Implement Stack using Queue (using single â€¦
class MyStack {
    Queue<Integer> f;
    public MyStack() {
        f=new LinkedList<>();
    }
    
    public void push(int x) {
        
        f.add(x);
        int l=f.size();
        while(l>1){
            f.add(f.remove());
            l--;
        }
 
    }
    
    public int pop() {
       return f.remove();
    }
    
    public int top() {
         
      return f.peek();
    }
    
    public boolean empty() {
        return f.isEmpty();
    }
}


4)Implement Queue using Stack (0(1) amortized method

class MyQueue {
    Stack<Integer> f;
    Stack<Integer> s;
    public MyQueue() {
        f=new Stack<>();
        s=new Stack<>();
    }
    
    public void push(int x) {
        while(!f.isEmpty()){
            s.push(f.pop());
        }
        
        f.push(x);
        while(!s.isEmpty()){
            f.push(s.pop());
        }
    }
    
    public int pop() {
        return f.pop();
    }
    
    public int peek() {
        return f.peek();
    }
    
    public boolean empty() {
        return f.isEmpty();
    }
}

5)Check for balanced parentheses

class Solution {
    public boolean isValid(String s1) {
        Stack<Character> s=new Stack<>();
        for(char c:s1.toCharArray()){
            if(c=='[' || c=='{' || c=='(')
                s.push(c);
            else{
                if(c==']'){
                    if(s.isEmpty() || s.pop()!='[')
                        return false;
                    
                    
                }
                
                if(c=='}'){
                    if(s.isEmpty() || s.pop()!='{')
                        return false;
                }
                
                if(c==')'){
                    
                    if(s.isEmpty() || s.pop()!='(')
                        return false;
                    
                }
                
            }
            
            
        }
        return s.isEmpty();
    }
}

6)Next Greater Element

class Solution {
    public int[] nextGreaterElement(int[] c, int[] a) {
       
        
        Stack<Integer> s=new Stack<>();
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=a.length-1;i>=0;i--){
            if(s.isEmpty()){
               
                map.put(a[i],-1);
            }
            else if(s.size()>0 && s.peek()>a[i]){
               
                map.put(a[i],s.peek());
            }
            else if(s.size()>0 && s.peek()<=a[i]){
                while(s.size()>0 && s.peek()<=a[i])
                    s.pop();
                if(s.size()==0){
                   
                    map.put(a[i],-1);
                }
                else{
                    
                    map.put(a[i],s.peek());
                }
            }
            s.push(a[i]);
            
        }
        int[] ans=new int[c.length];
        for(int i=0;i<c.length;i++){
            ans[i]=map.get(c[i]);
        }
        return ans;
    }
}


7)Sort a Stack
import java.util.* ;

import java.io.*; 

public class Solution {

 

    // Helper function to insert an element at the right position in the sorted stack

    public static void sorting(Stack<Integer> stack, int num) {

        // If the stack is empty or the top element is less than the new element (num),

        // then insert the new element at the top of the stack and return.

        if (stack.isEmpty() || stack.peek() < num) {

            stack.push(num);

            return;

        }

 

        // Remove the top element from the stack

        int n = stack.pop();

        

        // Recursively call sorting to insert the new element at the right position

        sorting(stack, num);

        

        // Push the removed element back to the stack after the new element is inserted

        stack.push(n);

    }

 

    // Main function to sort the stack using recursion

    public static void sortStack(Stack<Integer> stack) {

        // If the stack is empty, just return

        if (stack.isEmpty()) return;

 

        // Remove the top element from the stack

        int num = stack.pop();

        

        // Recursively call sortStack to sort the remaining elements in the stack

        sortStack(stack);

        

        // Insert the removed element at the right position in the sorted stack

        sorting(stack, num);

    }

}

