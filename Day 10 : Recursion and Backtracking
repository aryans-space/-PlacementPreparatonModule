1)Print all permutations of a string/array
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        boolean[] visited=new boolean[nums.length];
        
        per(res,nums,new ArrayList<>(),visited);
        
        
        
        return res;
    }
    
    public void per(List<List<Integer>> res,int[] nums,List<Integer> l,boolean[] visited){
        if(l.size()==nums.length){
            res.add(new ArrayList(l));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(visited[i]){
                continue;
            }
            
            visited[i]=true;
            l.add(nums[i]);
            per(res,nums,l,visited);
            l.remove(l.size()-1);
            
            visited[i]=false;
        }
        
        
        
    }
}


2)N queens Problem
class Solution {
    
    public List<List<String>> solveNQueens(int n) {
       char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                board[i][j]='.';
        }
        List<List<String>> res=new ArrayList<>();
        nqueen(board,0,res);
        return res;
    }
    
    public  void nqueen(char[][] board,int rows,List<List<String>> res){
        if(rows==board.length){
            res.add(display(board));
            return;
        }
        
        for(int i=0;i<board.length;i++){
            if(isSafe(board,rows,i)){
                board[rows][i]='Q';
                nqueen(board,rows+1,res);
                board[rows][i]='.';
            }
        }
        
        
        
    }
    
    public  boolean isSafe(char[][] board,int row,int col){
         for(int i=0;i<row;i++){
            if(board[i][col]=='Q')
                return false;
        }
        int left=Math.min(row,col);

        for(int i=1;i<=left;i++){
            if(board[row-i][col-i]=='Q')
                return false;
        }

        int right=Math.min(row,board.length-col-1);
        for(int i=1;i<=right;i++){
            if(board[row-i][col+i]=='Q')
                return false;
        }

        return true;
    }
    
    public List<String> display(char[][] board){
        List<String> res=new ArrayList<>();
        
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
        
    }
    
    
}

3)Sudoko Solver
class Solution {
    public void solveSudoku(char[][] board) {
        solved(board);
    }
     static boolean solved(char[][] board){
        int n=board.length;
        int row=-1;
        int col=-1;
        boolean empty=true;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='.'){
                    row=i;
                    col=j;
                    empty=false;
                    break;
                }
            }
            if(!empty)
                break;

        }
        if(empty)
            return true;
        for(char number='1';number<='9';number++){
            if(isSafe(board,row,col,number)){
                board[row][col]=number;
                if(solved(board))
                    return true;
                else
                    board[row][col]='.';
            }
        }
        return false;
    }
   

    static boolean isSafe(char[][] board,int row,int col,char num){

        for(int i=0;i<board.length;i++){
            if(board[i][col]==num)
                return false;
        }

        for(int i=0;i<board.length;i++){
            if(board[row][i]==num)
                return false;
        }

        int sqrt=(int)(Math.sqrt(board.length));
        int r=row-row%sqrt;
        int c=col-col%sqrt;

        for(int i=r;i<r+sqrt;i++){
            for(int j=c;j<c+sqrt;j++){
                if(board[i][j]==num)
                    return false;
            }
        }


        return true;


    }
}

4)M Coloring Problem
import java.util.*;
class TUF {
    public static boolean graphColoring(List < Integer > [] G, int[] color, int i, int C) {
        // Your code here
        int n = G.length;
        if (solve(i, G, color, n, C) == true) return true;
        return false;
    }
    private static boolean isSafe(int node, List < Integer > [] G, int[] color, int n, int col) {
        for (int it: G[node]) {
            if (color[it] == col) return false;
        }
        return true;
    }
    private static boolean solve(int node, List < Integer > [] G, int[] color, int n, int m) {
        if (node == n) return true;

        for (int i = 1; i <= m; i++) {
            if (isSafe(node, G, color, n, i)) {
                color[node] = i;
                if (solve(node + 1, G, color, n, m) == true) return true;
                color[node] = 0;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        int N = 4, M = 3;
        List < Integer > [] G = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new ArrayList < > ();
        }
        G[0].add(1);
        G[1].add(0);
        G[1].add(2);
        G[2].add(1);
        G[2].add(3);
        G[3].add(2);
        G[3].add(0);
        G[0].add(3);
        G[0].add(2);
        G[2].add(0);
        int[] color = new int[N];
        boolean ans = graphColoring(G, color, 0, M);
        if (ans == true)
            System.out.println("1");
        else
            System.out.println("0");
    }
}

5)Rat in a Maze
import java.util.*;

// m is the given matrix and n is the order of matrix
class Solution {
  private static void solve(int i, int j, int a[][], int n, ArrayList < String > ans, String move,
    int vis[][]) {
    if (i == n - 1 && j == n - 1) {
      ans.add(move);
      return;
    }

    // downward
    if (i + 1 < n && vis[i + 1][j] == 0 && a[i + 1][j] == 1) {
      vis[i][j] = 1;
      solve(i + 1, j, a, n, ans, move + 'D', vis);
      vis[i][j] = 0;
    }

    // left
    if (j - 1 >= 0 && vis[i][j - 1] == 0 && a[i][j - 1] == 1) {
      vis[i][j] = 1;
      solve(i, j - 1, a, n, ans, move + 'L', vis);
      vis[i][j] = 0;
    }

    // right 
    if (j + 1 < n && vis[i][j + 1] == 0 && a[i][j + 1] == 1) {
      vis[i][j] = 1;
      solve(i, j + 1, a, n, ans, move + 'R', vis);
      vis[i][j] = 0;
    }

    // upward
    if (i - 1 >= 0 && vis[i - 1][j] == 0 && a[i - 1][j] == 1) {
      vis[i][j] = 1;
      solve(i - 1, j, a, n, ans, move + 'U', vis);
      vis[i][j] = 0;
    }
  }
  public static ArrayList < String > findPath(int[][] m, int n) {
    int vis[][] = new int[n][n];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        vis[i][j] = 0;
      }
    }

    ArrayList < String > ans = new ArrayList < > ();
    if (m[0][0] == 1) solve(0, 0, m, n, ans, "", vis);
    return ans;
  }
}
class TUF {
  public static void main(String[] args) {

    int n = 4;
    int[][] a = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};

    Solution obj = new Solution();
    ArrayList < String > res = obj.findPath(a, n);
    if (res.size() > 0) {
      for (int i = 0; i < res.size(); i++)
        System.out.print(res.get(i) + " ");
      System.out.println();
    } else {
      System.out.println(-1);
    }
  }
}

6)Word Break (print all ways)
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

public static ArrayList<String> wordBreak(String s, ArrayList<String> dictionary) {
 // Write your code here.
 HashSet<String> h=new HashSet<>();
 for(String str:dictionary){
  h.add(str);
 }
 ArrayList<String> res=new ArrayList<>();
 solve(0,s,new ArrayList<>(),h,res);
 return res;

 
}
public static void solve(int ind,String s,List<String>ls,HashSet<String> h,ArrayList<String> res){
 if(ind==s.length()){
  StringBuilder str=new StringBuilder();
  for(int i=0;i<ls.size();i++){
   str.append(ls.get(i));
   str.append(" ");
  }
  res.add(str.toString());
  return ;
 }
 for(int i=ind;i<s.length();i++){
  if(h.contains(s.substring(ind,i+1))){
   ls.add(s.substring(ind,i+1));
   solve(i+1,s,ls,h,res);
   ls.remove(ls.size()-1);
  }
 }
}
}
