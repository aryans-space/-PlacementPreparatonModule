1)Reverse a LinkedList
class Solution {
    public ListNode reverseList(ListNode head) {
       if(head==null)
            return head;
        ListNode prev=null;
        ListNode pres=head;
        ListNode next=pres.next;
        while(pres!=null){
            pres.next=prev;
            prev=pres;
            pres=next;
            if(next!=null)
                next=next.next;
        }
        
        return prev;
    }
}

2)Find the middle of LinkedList
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode f=head;
        ListNode s=head;
        while(f!=null && f.next!=null){
            f=f.next.next;
            s=s.next;
        }
        return s;
    }
}

3)Merge two sorted Linked List 
class Solution {
    public ListNode mergeTwoLists(ListNode f, ListNode s) {
        ListNode node=new ListNode();
        ListNode temp=node;
        
        while(f!=null && s!=null){
            if(f.val<s.val){
                node.next=f;
                node=node.next;
                f=f.next;
            }
            else{
                node.next=s;
                s=s.next;
                node=node.next;
            }
        }
        while(f!=null){
             node.next=f;
                node=node.next;
                f=f.next;
        }
          while(s!=null){
              node.next=s;
            s=s.next;
            node=node.next;
          }
        return temp.next;
    }
}

4)Remove N-th node from back of LinkedList
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
            return null;
        int index=c(head)-n;
        return remove(head,index);
        
    }
    public ListNode remove(ListNode node,int n){
        if(n==0){
            return node.next;
        }
        
        node.next=remove(node.next,n-1);
        return node;
    }
    
    public static int c(ListNode head){
        ListNode temp=head;
        int count=0;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        return count;
    }
}

5)Add two numbers as LinkedList
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          ListNode temp=new ListNode(0);
        
        int carry=0;
        int len1=c(l1);
        int len2=c(l2);
        if(len1>len2){
            temp.next=l1;
        }
        else if(len2>len1){
            temp.next=l2;
        }
        else
            temp.next=l1;
        ListNode curr=temp;
        
        while(l1!=null && l2!=null){
            int sum=l1.val+l2.val+carry;
            carry=sum/10;
            temp.next.val=sum%10;
            temp=temp.next;
            l1=l1.next;
            l2=l2.next;
        }
        while(l1!=null){
            int sum=l1.val+carry;
            carry=sum/10;
            temp.next.val=sum%10;
            temp=temp.next;
            l1=l1.next;
        }
         while(l2!=null){
            int sum=l2.val+carry;
            carry=sum/10;
            temp.next.val=sum%10;
            temp=temp.next;
             l2=l2.next;
        }
        
        if(carry!=0){
            ListNode t2=new ListNode(carry);
            temp.next=t2;
        }
        
        return curr.next;
        
        
        
    }
    
    public int c(ListNode temp){
        int count=0;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        return count;
    }
}

6)Delete a given Node when a node is given.(â€¦
class Solution {
    public void deleteNode(ListNode node) {
       node.val=node.next.val;
        node.next=node.next.next;
        
    }
}
