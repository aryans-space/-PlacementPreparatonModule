1)Reverse Words in a String
class Solution {
public String reverseWords(String s) {
StringBuilder sb=new StringBuilder();
int n=s.length(),last=n;
for(int i=n-1;i>=0;i--){
if(s.charAt(i)==' '){
sb.append(s.substring(i,last));
last=i;
}
}
sb.append(' '+s.substring(0,last));
return sb.toString().replaceAll("\s+"," ").trim();
}
}


2)Longest Palindrome in a string
class Solution {
    public String longestPalindrome(String s) {
       int start = 0, end = 0;
       for(int i = 0; i < s.length(); i ++) {
           char c = s.charAt(i);
           int left = i;
           int right = i;
           while(left >= 0 && s.charAt(left) == c) left --;
           while(right < s.length() && s.charAt(right) == c) right ++;
           while(left >= 0 && right < s.length()) {
               if(s.charAt(left) != s.charAt(right)) break;
               left --;
               right ++;
           }
           left += 1;
           if(end - start < right - left) {
               start = left;
               end = right;
           }
       } 
       return s.substring(start, end);
    }
}

3)Roman Number to Integer and vice versa
class Solution {
    
    public int translate(char c){
        switch(c){
            case 'I' :
                return 1;
            case 'V':
                return 5;
            case 'X':
                return 10;
            case 'L':
                return 50;
            case 'C':
                return 100;
            case 'D':
                return 500;
            case 'M':
                return 1000;
                default:
                return 0;
        }
    }
    public int romanToInt(String s) {
        int cur=translate(s.charAt(0));
        int sum=0;
        for(int i=1;i<s.length();i++){
            int next=translate(s.charAt(i));
            
            if(cur<next)
                sum=sum-cur;
            else
                sum=sum+cur;
            cur=next;
        }
        
        sum+=cur;
        return sum;
    }
}

4)Implement ATOI/STRSTR
class Solution {
    public int myAtoi(String s) {
        long ans = 0;
        int neg = 0 , i = 0;
        for(; i < s.length(); i++) {
            if(s.charAt(i) != ' '){
                char ch = s.charAt(i);
                if(ch == '+' || ch == '-') i++;
                if(ch == '-') neg = 1;
                break;
            }
        }
        for(; i < s.length(); i++){
            char c = s.charAt(i);
            if(c > '9' || c < '0') break;
            ans = ans * 10 + (c - '0');
            if(ans > 2147483647){
                return neg == 1? -2147483648:2147483647;
            }
        }
        if(neg == 1) return (int) ans * -1;
        return (int)ans;
    }
}

5)Longest Common Prefix
class Solution {
    class Node{
        Node[] children;
        boolean eow;
        int wc;
        public Node(){
            children=new Node[26];
            eow=false;
            wc=0;
        }
    }
    Node root=new Node();
    int longest=0;
    
    
    public void insert(String word,int n){
        Node curr=root;
        if(word.length()==0)
            return;
        for(int i=0;i<word.length();i++){
            int index=word.charAt(i)-'a';
            if(curr.children[index]==null)
            {
                curr.children[index]=new Node();
            }
             curr.children[index].wc++;
            if( curr.children[index].wc==n)
            longest++;
            if(i==word.length()-1)
                curr.children[index].eow=true;
            curr=curr.children[index];
        }
    }
   StringBuilder sb =new StringBuilder("");
    public String longestCommonPrefix(String[] words) {
         for(int i=0;i<words.length;i++)
            insert(words[i],words.length);
       startsWith(words[0]);
        return sb.toString();
        
    }
    public void startsWith(String word) {
        Node curr=root;
        for(int i=0;i<longest;i++){
            int index=word.charAt(i)-'a';
           
                sb.append((char)('a'+index));
          
            curr=curr.children[index];
        }
        
    }

}

6)Rabin Karp
class Solution {
    public int repeatedStringMatch(String a, String b) {
        boolean[] bucket = new boolean[26];
        for (char c : a.toCharArray()) bucket[c - 'a'] = true;
        for (char c : b.toCharArray()) 
            if (!bucket[c - 'a']) return -1;
        
        int cnt = b.length() / a.length();

        StringBuilder sb = new StringBuilder(a.repeat(cnt));

        for (int i = 0;i < 3;i++) {
            if (sb.indexOf(b) >= 0) return cnt + i;
            sb.append(a);
        }
        return -1;
    }
}
