1)The N-th root of an integer
import java.util.*;

public class tUf {
    //Return 1 if mid == m
    //Return 0 if mid < m
    //Return 2 if mid > m
    public static int func(int mid, int n, int m) {
        long ans = 1;
        for (int i = 1; i <= n; i++) {
            ans = ans * mid;
            if (ans > m) return 2;
        }
        if (ans == m) return 1;
        return 0;
    }

    public static int NthRoot(int n, int m) {
        // Use binary search on the answer space:
        int low = 1, high = m;
        while (low <= high) {
            int mid = (low + high) / 2;
            int midN = func(mid, n, m);
            if (midN == 1) {
                return mid;
            } else if (midN == 0) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int n = 3, m = 27;
        int ans = NthRoot(n, m);
        System.out.println("The answer is: " + ans);
    }
}


2)Matrix Median
import java.util.*;
public class TUF {
  // Function to find median of row wise sorted matrix
  public static int Findmedian(int[][] arr, int row, int col) {
    int[] median = new int[row * col];
    int index = 0;
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < col; j++) {
        median[index] = arr[i][j];
        index++;
      }
    }
    return median[(row * col) / 2];
  }
  public static void main(String args[]) {
    int row = 3, col = 3;
    int[][] arr = {{1, 3, 8},
                   {2, 3, 4},
                   {1, 2, 5}};
                   
    System.out.println("The median of the row-wise sorted matrix is: "+
    Findmedian(arr, row, col));
 
  }
}

3)Find the element that appears once in a so…
class Solution {
    public int singleNonDuplicate(int[] nums) {
         int ans=-1;
        if(nums.length==1)
            return nums[0];
        for(int i=0;i<nums.length;i++)
        {
            if(i==nums.length-1)
                return nums[i];
            if(nums[i]==nums[i+1])
                i++;
            else
            {
                ans=nums[i];
                break;}
        }
        return ans;
        
    }
}

4)Search element in a sorted and rotated arr…
class Solution {
    public int search(int[] a, int t) {
        int ans=pivot(a);
        if(ans!=-1){
            int r1=bs(a,0,ans,t);
            if(r1!=-1){
                return r1;
                
            }
            int r2=bs(a,ans+1,a.length-1,t);
            if(r2!=-1){
                return r2;
            
            }

            if(r1==-1 && r2==-1)
                return -1;
        }
        
            int r=bs(a,0,a.length-1,t);
            if(r!=-1)
                return r;
        return -1;
        
        
    }
   public int bs(int[] a,int s,int e,int target){

        while(s<=e){
            int mid=s+(e-s)/2;

            if(a[mid]==target){
                return mid;
            }
            else if(a[mid]>target){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return -1;

    }
    public int pivot(int[] a)
    {
        int min=0;
        int max=a.length-1;
        while(min<=max)
        {
            int mid=min+(max-min)/2;
            if(mid<max && a[mid]>a[mid+1])
                return mid;
            if(mid>min && a[mid]<a[mid-1])
                return mid-1;
            if(a[min]>=a[mid])
                max=mid-1;
            else
                min=mid+1;
        }
        return -1;
    }
}

5)Median of 2 sorted arrays
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}

6)K-th element of two sorted arrays
import java.util.*;
public class Main {
    static int kthelement(int array1[], int array2[], int m, int n, int k) {
        int p1 = 0, p2 = 0, counter = 0, answer = 0;

        while (p1 < m && p2 < n) {
            if (counter == k) break;
            else if (array1[p1] < array2[p2]) {
                answer = array1[p1];
                ++p1;
            } else {
                answer = array2[p2];
                ++p2;
            }
            ++counter;
        }
        if (counter != k) {
            if (p1 != m - 1)
                answer = array1[k - counter];
            else
                answer = array2[k - counter];
        }
        return answer;
    }
    public static void main(String args[]) {
        int array1[] = {2,3,6,7,9};
        int array2[] = {1,4,8,10};
        int m = array1.length;
        int n = array2.length;
        int k = 5;
        System.out.println("The element at the kth position in the final sorted array is "
        + kthelement(array1, array2, m, n, k));

    }
}


7)Allocate Minimum Number of Pages
import java.util.*;

public class Main {
    public static int countStudents(ArrayList<Integer> arr, int pages) {
        int n = arr.size(); // size of array
        int students = 1;
        long pagesStudent = 0;
        for (int i = 0; i < n; i++) {
            if (pagesStudent + arr.get(i) <= pages) {
                // add pages to current student
                pagesStudent += arr.get(i);
            } else {
                // add pages to next student
                students++;
                pagesStudent = arr.get(i);
            }
        }
        return students;
    }

    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        // book allocation impossible
        if (m > n)
            return -1;

        int low = Collections.max(arr);
        int high = arr.stream().mapToInt(Integer::intValue).sum();
        while (low <= high) {
            int mid = (low + high) / 2;
            int students = countStudents(arr, mid);
            if (students > m) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }

    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(25, 46, 28, 49, 24));
        int n = 5;
        int m = 4;
        int ans = findPages(arr, n, m);
        System.out.println("The answer is: " + ans);
    }
}

8)Aggressive Cows
import java.util.*;

public class tUf {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }
    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int low = 1, high = stalls[n - 1] - stalls[0];
        //apply binary search:
        while (low <= high) {
            int mid = (low + high) / 2;
            if (canWePlace(stalls, mid, k) == true) {
                low = mid + 1;
            } else high = mid - 1;
        }
        return high;
    }
    public static void main(String[] args) {
        int[] stalls = {0, 3, 4, 7, 10, 9};
        int k = 4;
        int ans = aggressiveCows(stalls, k);
        System.out.println("The maximum possible minimum distance is: " + ans);
    }
}
